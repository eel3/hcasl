#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) Command line tool for "head -c N && shift 1 char" loop. Version 1.0.0.20190224

import argparse
import collections
import functools
import sys


def hcasl(istream, ostream, chars, buf):
    for s in iter(functools.partial(istream.read, 1), ''):
        buf.append(s)
        if len(buf) >= chars:
            ostream.write(''.join((s for s in buf)) + '\n')
            buf.popleft()


def parse_args():
    parser = argparse.ArgumentParser(description=
            'Command line tool for "head -c N && shift 1 char" loop.')

    parser.add_argument('-n', '--chars', nargs=1, default=[8], type=int,
                        help='print the CHARS characters per line (CHARS >= 1)')
    parser.add_argument('-o', '--output', nargs=1, default=['-'],
                        help="place output in file OUTPUT")
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.0.0')

    return parser.parse_known_args()


def main():
    args = parse_args()

    chars = args[0].chars[0]
    if chars <= 0:
        print('error: -n/--chars must be greater or equal to 1', file=sys.stderr)
        sys.exit(1)

    ostream = sys.stdout
    output = args[0].output[0]
    if output != '-':
        try:
            ostream = open(output, 'w')
        except OSError as e:
            print(e, file=sys.stderr)
            sys.exit(1)

    if len(args[1]) <= 0:
        args[1].append('-')

    buf = collections.deque()
    retval = 0

    for input in args[1]:
        if input == '-':
            hcasl(sys.stdin, ostream, chars, buf)
        else:
            try:
                with open(input, 'r') as istream:
                    hcasl(istream, ostream, chars, buf)
            except OSError as e:
                print(e, file=sys.stderr)
                retval = 1

    if ostream != sys.stdout:
        ostream.close()

    sys.exit(retval)

if __name__ == '__main__':
    main();
